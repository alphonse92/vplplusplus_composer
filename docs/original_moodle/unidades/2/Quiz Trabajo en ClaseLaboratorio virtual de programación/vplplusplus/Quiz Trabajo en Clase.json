{
  "name": "Quiz Trabajo en Clase",
  "description": "Quiz Trabajo en Clase",
  "tests": [
    {
      "name": "AlumnoTest",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\npublic FraccionarioTest(){}\n\n@Before\npublic void setUp(){}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAlumno",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nAlumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\nassertEquals(\"1\", alumno1.getCodigo());\nassertEquals(\"Primero\", alumno1.getNombres());\nassertEquals(\"de la lista\", alumno1.getApellidos());\nassertEquals(16, alumno1.getEdad());\nassertEquals(4.2, alumno1.getPromedio(), 0.001);\n\nalumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 3.0f);\nassertEquals(true, alumno1.tienePromedioCondicional());\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    },
    {
      "name": "GrupoTest",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\npublic FraccionarioTest(){}\n\n@Before\npublic void setUp(){}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructorGrupo",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint r = (int)(Math.random()*100);\nMateria materia1 = new Materia(\"POO II\", r);\nGrupo grupo1 = new Grupo(materia1);\nassertNotNull(grupo1.alumnos);\nassertEquals(r, grupo1.alumnos.length);\nassertEquals(0, grupo1.getContadorDeAlumnos());\nassertEquals(materia1, grupo1.materia);\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarAlumnoOK",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nMateria materia1 = new Materia(\"POO II\", 4);\nAlumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\nAlumno alumno2 = new Alumno(\"2\", \"Segundo\", \"de la lista\", 16, 3.6f);\nAlumno alumno3 = new Alumno(\"3\", \"Tercero\", \"de la lista\", 16, 3.5f);\nAlumno alumno4 = new Alumno(\"4\", \"Cuarto\", \"de la lista\", 16, 3.5f);        \nGrupo grupo1 = new Grupo(materia1);\nassertEquals(true, grupo1.agregarAlumno(alumno1));\nassertEquals(true, grupo1.agregarAlumno(alumno2));\nassertEquals(true, grupo1.agregarAlumno(alumno3));\nassertEquals(true, grupo1.agregarAlumno(alumno4));\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarAlumnoErrorTamanio",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nMateria materia1 = new Materia(\"POO II\", 3);\nAlumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\nAlumno alumno2 = new Alumno(\"2\", \"Segundo\", \"de la lista\", 16, 3.6f);\nAlumno alumno3 = new Alumno(\"3\", \"Tercero\", \"de la lista\", 16, 3.5f);\nAlumno alumno4 = new Alumno(\"4\", \"Cuarto\", \"de la lista\", 16, 3.5f);        \nGrupo grupo1 = new Grupo(materia1);\ngrupo1.agregarAlumno(alumno1);\ngrupo1.agregarAlumno(alumno2);\ngrupo1.agregarAlumno(alumno3);\nassertEquals(false, grupo1.agregarAlumno(alumno4));\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarAlumnoErrorRepetido",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nMateria materia1 = new Materia(\"POO II\", 4);\nAlumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\nAlumno alumno2 = new Alumno(\"1\", \"Segundo\", \"de la lista\", 16, 3.6f);\nAlumno alumno3 = new Alumno(\"3\", \"Primero\", \"de la lista\", 16, 3.5f);\nAlumno alumno4 = new Alumno(\"4\", \"Cuarto\", \"de la lista\", 16, 3.5f);        \nGrupo grupo1 = new Grupo(materia1);\ngrupo1.agregarAlumno(alumno1);\nassertEquals(false, grupo1.agregarAlumno(alumno2));\nassertEquals(false, grupo1.agregarAlumno(alumno3));\nassertEquals(true, grupo1.agregarAlumno(alumno4));\n",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    },
    {
      "name": "InscripcionTest",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\npublic FraccionarioTest(){}\n\n@Before\npublic void setUp(){}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructorInscripcion",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "    \nAlumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\nMateria materia1 = new Materia(\"POO II\", 40);\nInscripcion inscripc1 = new Inscripcion(alumno1, materia1);\nassertEquals(alumno1, inscripc1.getAlumno());\nassertEquals(materia1, inscripc1.getMateria());\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    },
    {
      "name": "MateriaTest",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\npublic FraccionarioTest(){}\n\n@Before\npublic void setUp(){}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructorMateria",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    int r = (int)(Math.random()*100);\n    Materia materia1 = new Materia(\"POO II\", r);\n    assertEquals(r, materia1.getMaximoDeAlumnosPorGrupo());\n    assertEquals(\"POO II\", materia1.getNombre());\n    assertNotNull(materia1.inscripciones);\n    assertEquals(0, materia1.inscripciones.size());\n    assertNull(materia1.grupos);\n",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testInscribirAlumnoOK",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Materia materia1 = new Materia(\"POO II\", 40);\n    Alumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\n    Alumno alumno2 = new Alumno(\"2\", \"Segundo\", \"de la lista\", 16, 4.2f);\n    assertEquals(true, materia1.inscribir(alumno1));\n    assertEquals(true, materia1.inscribir(alumno2));\n    assertNotNull(materia1.inscripciones);\n    assertEquals(2, materia1.inscripciones.size());\n",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testInscribirAlumnoErrorCondicional",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Materia materia1 = new Materia(\"POO II\", 40);\n    Alumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\n    Alumno alumno2 = new Alumno(\"2\", \"Segundo\", \"de la lista\", 16, 3.0f);\n    Alumno alumno3 = new Alumno(\"3\", \"Tercero\", \"de la lista\", 16, 3.5f);\n    assertEquals(true, materia1.inscribir(alumno1));\n    assertEquals(false, materia1.inscribir(alumno2));\n    assertEquals(true, materia1.inscribir(alumno3));\n    assertNotNull(materia1.inscripciones);\n    assertEquals(2, materia1.inscripciones.size());\n",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testInscribirAlumnoErrorRepetido",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Materia materia1 = new Materia(\"POO II\", 40);\n    Alumno alumno1 = new Alumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\n    Alumno alumno2 = new Alumno(\"2\", \"Segundo\", \"de la lista\", 16, 3.6f);\n    Alumno alumno3 = new Alumno(\"3\", \"Tercero\", \"de la lista\", 16, 3.5f);\n    materia1.inscribir(alumno1);\n    materia1.inscribir(alumno2);\n    materia1.inscribir(alumno3);\n    assertEquals(false, materia1.inscribir(alumno1));\n    assertEquals(false, materia1.inscribir(alumno2));\n    assertEquals(false, materia1.inscribir(alumno3));\n    assertNotNull(materia1.inscripciones);\n    assertEquals(3, materia1.inscripciones.size());\n",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testGenerarGrupos",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Materia materia1 = new Materia(\"POO II\", 8);\n    Alumno alumno = null;\n    Alumno [ ] alumnos = new Alumno[100];\n    for(int i=1;i<=100;i++){\n     alumno = new Alumno(\"\"+i, \"Alumno \" + i, \"de la lista\", 16, 4.2f);\n     materia1.inscribir(alumno);\n     alumnos[i-1]=alumno;\n    }\n    assertEquals(12, materia1.generarGrupos());\n    ArrayList<Grupo> grupos = materia1.grupos;\n    int k=0;\n    for(int j=0;j<12;j++){    \n      for(int i=0;i<8;i++){    \n        assertEquals(alumnos[k++],grupos.get(j).alumnos[i]);\n      }\n    }\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    },
    {
      "name": "UniversidadTest",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\npublic FraccionarioTest(){}\n\n@Before\npublic void setUp(){}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructorUniversidad",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    assertNotNull(universidad1.alumnos);\n    assertEquals(100, universidad1.alumnos.length);\n    assertEquals(0, universidad1.contadorAlumnos);\n    assertNotNull(universidad1.materias);\n    assertEquals(10, universidad1.materias.length);\n    assertEquals(0, universidad1.contadorMaterias);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarAlumnoOK",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    assertEquals(true, universidad1.agregarAlumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f));\n    assertEquals(true, universidad1.agregarAlumno(\"2\", \"Segundo\", \"de la lista\", 17, 3.0f));\n    assertEquals(true, universidad1.agregarAlumno(\"3\", \"Tercero\", \"de la lista\", 20, 3.5f));\n    assertNotNull(universidad1.alumnos);\n    assertEquals(100, universidad1.alumnos.length);\n    assertEquals(3, universidad1.contadorAlumnos);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarAlumnoErrorCodigoRepetido",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    assertEquals(true, universidad1.agregarAlumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f));\n    assertEquals(false, universidad1.agregarAlumno(\"1\", \"Segundo\", \"de la lista\", 17, 3.0f));\n    assertEquals(true, universidad1.agregarAlumno(\"3\", \"Tercero\", \"de la lista\", 20, 3.5f));\n    assertNotNull(universidad1.alumnos);\n    assertEquals(100, universidad1.alumnos.length);\n    assertEquals(2, universidad1.contadorAlumnos);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarAlumnoErrorNombresYApellidosRepetidos",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    assertEquals(true, universidad1.agregarAlumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f));\n    assertEquals(false, universidad1.agregarAlumno(\"2\", \"Primero\", \"de la lista\", 17, 3.0f));\n    assertEquals(true, universidad1.agregarAlumno(\"2\", \"Segundo\", \"de la lista\", 20, 3.5f));\n    assertNotNull(universidad1.alumnos);\n    assertEquals(100, universidad1.alumnos.length);\n    assertEquals(2, universidad1.contadorAlumnos);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarMateriaOK",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    assertEquals(true, universidad1.agregarMateria(\"Fundamentos\", 40));\n    assertEquals(true, universidad1.agregarMateria(\"POO I\", 40));\n    assertEquals(true, universidad1.agregarMateria(\"POO II\", 40));\n    assertNotNull(universidad1.materias);\n    assertEquals(10, universidad1.materias.length);\n    assertEquals(3, universidad1.contadorMaterias);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAgregarMateriaError",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    assertEquals(true, universidad1.agregarMateria(\"Fundamentos\", 40));\n    assertEquals(false, universidad1.agregarMateria(\"Fundamentos\", 40));\n    assertEquals(true, universidad1.agregarMateria(\"POO I\", 40));\n    assertNotNull(universidad1.materias);\n    assertEquals(10, universidad1.materias.length);\n    assertEquals(2, universidad1.contadorMaterias);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testGetAlumnoPorPosicionOK",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad(); \n    universidad1.agregarAlumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\n    universidad1.agregarAlumno(\"2\", \"Segundo\", \"de la lista\", 17, 3.0f);\n    universidad1.agregarAlumno(\"3\", \"Tercero\", \"de la lista\", 20, 3.5f);\n    assertNotNull(universidad1.getAlumno(1));\n    assertNotNull(universidad1.getAlumno(2));\n    assertNotNull(universidad1.getAlumno(3));\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testGetAlumnoPorPosicionError",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad(); \n    universidad1.agregarAlumno(\"1\", \"Primero\", \"de la lista\", 16, 4.2f);\n    universidad1.agregarAlumno(\"2\", \"Segundo\", \"de la lista\", 17, 3.0f);\n    universidad1.agregarAlumno(\"3\", \"Tercero\", \"de la lista\", 20, 3.5f);\n    assertNull(universidad1.getAlumno(-1));\n    assertNull(universidad1.getAlumno(0));\n    assertNull(universidad1.getAlumno(4));\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testGetMateriaPorPosicionOK",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    universidad1.agregarMateria(\"Fundamentos\", 40);\n    universidad1.agregarMateria(\"POO I\", 40);\n    universidad1.agregarMateria(\"POO II\", 40);\n    assertNotNull(universidad1.getMateria(1));\n    assertNotNull(universidad1.getMateria(2));\n    assertNotNull(universidad1.getMateria(3));        \n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testGetMateriaPorPosicionError",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad universidad1 = new Universidad();\n    universidad1.agregarMateria(\"Fundamentos\", 40);\n    universidad1.agregarMateria(\"POO I\", 40);\n    universidad1.agregarMateria(\"POO II\", 40);\n    assertNull(universidad1.getMateria(-1));\n    assertNull(universidad1.getMateria(0));\n    assertNull(universidad1.getMateria(4));        \n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testContieneAlumno",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad u = new Universidad();\n    Alumno a = null;\n    for(int i=1;i<=100;i++){\n        u.agregarAlumno(\"151100\"+i,\"a\"+i,\"a\"+i,(17+i)%23,(3f+i/100f));\n    }\n    for(int i=1;i<=100;i++){\n        assertEquals(true, u.contieneAlumno(new Alumno(\"151100\"+i,\"a\"+i,\"a\"+i,(17+i)%23,(3f+i/100f))));\n    }\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testContieneMaterua",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad u = new Universidad();\n    Materia m = null;\n    for(int i=1;i<=10;i++){\n        u.agregarMateria(\"151100\"+i,1);\n    }\n    for(int i=1;i<=10;i++){\n        assertEquals(true, u.contieneMateria(new Materia(\"151100\"+i,i)));\n    }\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testEliminarAlumno",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad u = new Universidad();\n    Alumno a = null;\n    for(int i=1;i<=100;i++){\n        u.agregarAlumno(\"151100\"+i,\"a\"+i,\"a\"+i,(17+i)%23,(3f+i/100f));\n    }\n    a = u.eliminarAlumno(1);\n    assertNotNull(a);\n    assertEquals(new Alumno(\"151100\"+1,\"a\"+1,\"a\"+1,(17+1)%23,(3f+1/100f)), a);\n    assertNotNull(u.alumnos);\n    assertEquals(100, u.alumnos.length);\n    assertEquals(99, u.contadorAlumnos);\n    a = u.eliminarAlumno(100);\n    assertNull(a);\n    a = u.eliminarAlumno(99);\n    assertNotNull(a);\n    assertEquals(new Alumno(\"151100\"+100,\"a\"+100,\"a\"+100,(17+100)%23,(3f+100/100f)), a);\n    assertNotNull(u.alumnos);\n    assertEquals(100, u.alumnos.length);\n    assertEquals(98, u.contadorAlumnos);\n    a = u.eliminarAlumno(100);\n    assertNull(a);\n    a = u.eliminarAlumno(99);\n    assertNull(a);\n    a = u.eliminarAlumno(50);\n    assertNotNull(a);\n    assertEquals(new Alumno(\"151100\"+51,\"a\"+51,\"a\"+51,(17+51)%23,(3f+51/100f)), a);\n    assertNotNull(u.alumnos);\n    assertEquals(100, u.alumnos.length);\n    assertEquals(97, u.contadorAlumnos);\n    a = u.eliminarAlumno(100);\n    assertNull(a);\n    a = u.eliminarAlumno(99);\n    assertNull(a);\n    a = u.eliminarAlumno(98);\n    assertNull(a);\n    int k=2;\n    for(int i=1;i<=97;i++,k++){\n        if(k==51)k++;\n        a = u.eliminarAlumno(1);\n        assertNotNull(a);\n        assertEquals(new Alumno(\"151100\"+k,\"a\"+k,\"a\"+k,(17+k)%23,(3f+k/100f)), a);\n    }\n    assertNotNull(u.alumnos);\n    assertEquals(100, u.alumnos.length);\n    assertEquals(0, u.contadorAlumnos);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testEliminarMateria",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\n    Universidad u = new Universidad();\n    Materia m = null;\n    for(int i=1;i<=100;i++){\n        u.agregarMateria(\"151100\"+i,i);\n    }\n    m = u.eliminarMateria(1);\n    assertNotNull(m);\n    assertEquals(new Materia(\"151100\"+1,1), m);\n    assertNotNull(u.materias);\n    assertEquals(10, u.materias.length);\n    assertEquals(9, u.contadorMaterias);\n    m = u.eliminarMateria(10);\n    assertNull(m);\n    m = u.eliminarMateria(9);\n    assertNotNull(m);\n    assertEquals(new Materia(\"151100\"+10,10), m);\n    assertNotNull(u.materias);\n    assertEquals(10, u.materias.length);\n    assertEquals(8, u.contadorMaterias);\n    m = u.eliminarMateria(10);\n    assertNull(m);\n    m = u.eliminarMateria(9);\n    assertNull(m);\n    m = u.eliminarMateria(5);\n    assertNotNull(m);\n    assertEquals(new Materia(\"151100\"+6,6), m);\n    assertNotNull(u.materias);\n    assertEquals(10, u.materias.length);\n    assertEquals(7, u.contadorMaterias);\n    m = u.eliminarMateria(10);\n    assertNull(m);\n    m = u.eliminarMateria(9);\n    assertNull(m);\n    m = u.eliminarMateria(8);\n    assertNull(m);\n    int k=2;\n    for(int i=1;i<=7;i++,k++){\n        if(k==6)k=7;\n        m = u.eliminarMateria(1);\n        assertNotNull(m);\n        assertEquals(new Materia(\"151100\"+k,k), m);\n    }\n    assertNotNull(u.materias);\n    assertEquals(10, u.materias.length);\n    assertEquals(0, u.contadorMaterias);\n",
          "grade": 5,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    }
  ]
}