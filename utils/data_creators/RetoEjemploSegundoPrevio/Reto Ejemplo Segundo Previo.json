{
  "name": "Reto Ejemplo Segundo Previo",
  "description": "Reto Ejemplo Segundo Previo",
  "tests": [
    {
      "name": "Test1",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\n\npublic Test1(){\n\n}\n\n@Before\npublic void setUp(){}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testHoraConstructor",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nHora hora = null;\nException e = null;\ntry{\n    hora = new Hora(24, 11, 12);\n}\ncatch(Exception ex){\n    e = ex;\n}\nassertEquals(false, hora.esHoraValida());\n//assertNotNull(\"El constructor de Hora debe validar y lanzar una excepcion si hay error.\", e);\ne = null;\ntry{\n    hora = new Hora(23, 60, 12);\n}\ncatch(Exception ex){\n    e = ex;\n}\n//assertNotNull(\"El constructor de Hora debe validar y lanzar una excepcion si hay error.\", e);\nassertEquals(false, hora.esHoraValida());\ne = null;\ntry{\n    hora = new Hora(23, 11, 60);\n}\ncatch(Exception ex){\n    e = ex;\n}\n//assertNotNull(\"El constructor de Hora debe validar y lanzar una excepcion si hay error.\", e);\nassertEquals(false, hora.esHoraValida());\n",
          "grade": 8,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testHoraEsMenorMayor",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint s1 = ((int)(Math.random()*1000))%60, s2=0;\nint m1 = ((int)(Math.random()*1000))%60, m2=0;\nint h1 = ((int)(Math.random()*1000))%23, h2=0;\n\ndo{s2 = ((int)(s1 + Math.random()*1000))%60;}while(s2==s1);\nHora hora1 = new Hora(h1, m1, s1);\nHora hora2 = new Hora(h1, m1, s2);\nassertEquals(s1<s2, hora1.esMenor(hora2));\nassertEquals(s1>s2, hora1.esMayor(hora2));\nassertEquals(!(s1<s2), hora2.esMenor(hora1));\nassertEquals(!(s1>s2), hora2.esMayor(hora1));\n\n\ndo{s2 = ((int)(s1 + Math.random()*1000))%60;}while(s2==s1);\ndo{m2 = ((int)(m1 + Math.random()*1000))%60;}while(m2==m1);        \nhora1 = new Hora(h1, m1, s1);\nhora2 = new Hora(h1, m2, s2);\nassertEquals(m1<m2, hora1.esMenor(hora2));\nassertEquals(m1>m2, hora1.esMayor(hora2));\nassertEquals(!(m1<m2), hora2.esMenor(hora1));\nassertEquals(!(m1>m2), hora2.esMayor(hora1));\n\ndo{s2 = ((int)(s1 + Math.random()*1000))%60;}while(s2==s1);\ndo{m2 = ((int)(m1 + Math.random()*1000))%60;}while(m2==m1);\ndo{h2 = ((int)(h1 + Math.random()*1000))%23;}while(h2==h1);\nhora1 = new Hora(h1, m1, s1);\nhora2 = new Hora(h2, m2, s2);\nassertEquals(h1<h2, hora1.esMenor(hora2));\nassertEquals(h1>h2, hora1.esMayor(hora2));\nassertEquals(!(h1<h2), hora2.esMenor(hora1));\nassertEquals(!(h1>h2), hora2.esMayor(hora1));\n",
          "grade": 8,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testHoraRestarEnSegundos",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nString [] horas = {\n        \"5:3:19\",\"21:05:8\",\"12:57:15\",\"7:20:37\",\"2:26:35\",\"10:22:4\",\"16:21:19\",\"12:6:46\",\n        \"9:7:35\",\"13:38:39\",\"12:22:15\",\"11:30:8\",\"10:23:33\",\"6:44:29\",\"7:59:16\",\n        \"2:53:56\",\"2:31:52\",\"22:33:45\",\"9:43:58\"};\nlong [][] restas = {\n        {0,\t-57709,\t-28436,\t-8238,\t9404,\t-19125,\t-40680,\t-25407,\t-14656,\t-30920,\t-26336,\t-23209,\t-19214,\t-6070,\t-10557,\t7763,\t9087,\t-63026,\t-16839},\n        {57709,\t0,\t29273,\t49471,\t67113,\t38584,\t17029,\t32302,\t43053,\t26789,\t31373,\t34500,\t38495,\t51639,\t47152,\t65472,\t66796,\t-5317,\t40870},\n        {28436,\t-29273,\t0,\t20198,\t37840,\t9311,\t-12244,\t3029,\t13780,\t-2484,\t2100,\t5227,\t9222,\t22366,\t17879,\t36199,\t37523,\t-34590,\t11597},\n        {8238,\t-49471,\t-20198,\t0,\t17642,\t-10887,\t-32442,\t-17169,\t-6418,\t-22682,\t-18098,\t-14971,\t-10976,\t2168,\t-2319,\t16001,\t17325,\t-54788,\t-8601},\n        {-9404,\t-67113,\t-37840,\t-17642,\t0,\t-28529,\t-50084,\t-34811,\t-24060,\t-40324,\t-35740,\t-32613,\t-28618,\t-15474,\t-19961,\t-1641,\t-317,\t-72430,\t-26243},\n        {19125,\t-38584,\t-9311,\t10887,\t28529,\t0,\t-21555,\t-6282,\t4469,\t-11795,\t-7211,\t-4084,\t-89,\t13055,\t8568,\t26888,\t28212,\t-43901,\t2286},\n        {40680,\t-17029,\t12244,\t32442,\t50084,\t21555,\t0,\t15273,\t26024,\t9760,\t14344,\t17471,\t21466,\t34610,\t30123,\t48443,\t49767,\t-22346,\t23841},\n        {25407,\t-32302,\t-3029,\t17169,\t34811,\t6282,\t-15273,\t0,\t10751,\t-5513,\t-929,\t2198,\t6193,\t19337,\t14850,\t33170,\t34494,\t-37619,\t8568},\n        {14656,\t-43053,\t-13780,\t6418,\t24060,\t-4469,\t-26024,\t-10751,\t0,\t-16264,\t-11680,\t-8553,\t-4558,\t8586,\t4099,\t22419,\t23743,\t-48370,\t-2183},\n        {30920,\t-26789,\t2484,\t22682,\t40324,\t11795,\t-9760,\t5513,\t16264,\t0,\t4584,\t7711,\t11706,\t24850,\t20363,\t38683,\t40007,\t-32106,\t14081},\n        {26336,\t-31373,\t-2100,\t18098,\t35740,\t7211,\t-14344,\t929,\t11680,\t-4584,\t0,\t3127,\t7122,\t20266,\t15779,\t34099,\t35423,\t-36690,\t9497},\n        {23209,\t-34500,\t-5227,\t14971,\t32613,\t4084,\t-17471,\t-2198,\t8553,\t-7711,\t-3127,\t0,\t3995,\t17139,\t12652,\t30972,\t32296,\t-39817,\t6370},\n        {19214,\t-38495,\t-9222,\t10976,\t28618,\t89,\t-21466,\t-6193,\t4558,\t-11706,\t-7122,\t-3995,\t0,\t13144,\t8657,\t26977,\t28301,\t-43812,\t2375},\n        {6070,\t-51639,\t-22366,\t-2168,\t15474,\t-13055,\t-34610,\t-19337,\t-8586,\t-24850,\t-20266,\t-17139,\t-13144,\t0,\t-4487,\t13833,\t15157,\t-56956,\t-10769},\n        {10557,\t-47152,\t-17879,\t2319,\t19961,\t-8568,\t-30123,\t-14850,\t-4099,\t-20363,\t-15779,\t-12652,\t-8657,\t4487,\t0,\t18320,\t19644,\t-52469,\t-6282},\n        {-7763,\t-65472,\t-36199,\t-16001,\t1641,\t-26888,\t-48443,\t-33170,\t-22419,\t-38683,\t-34099,\t-30972,\t-26977,\t-13833,\t-18320,\t0,\t1324,\t-70789,\t-24602},\n        {-9087,\t-66796,\t-37523,\t-17325,\t317,\t-28212,\t-49767,\t-34494,\t-23743,\t-40007,\t-35423,\t-32296,\t-28301,\t-15157,\t-19644,\t-1324,\t0,\t-72113,\t-25926},\n        {63026,\t5317,\t34590,\t54788,\t72430,\t43901,\t22346,\t37619,\t48370,\t32106,\t36690,\t39817,\t43812,\t56956,\t52469,\t70789,\t72113,\t0,\t46187},\n        {16839,\t-40870,\t-11597,\t8601,\t26243,\t-2286,\t-23841,\t-8568,\t2183,\t-14081,\t-9497,\t-6370,\t-2375,\t10769,\t6282,\t24602,\t25926,\t-46187,\t0}\n    };\nHora [] misHoras = new Hora[horas.length];\nfor(int i=0; i< horas.length;i++){\n    String [] d = horas[i].split(\":\");\n    int h = Integer.parseInt(d[0]);\n    misHoras[i] = new Hora(h, Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n}\n\nfor(int i=0; i<misHoras.length;i++){\n    for(int j = 0; j<misHoras.length;j++){\n        long r = misHoras[i].restarEnSegundos(misHoras[j]);\n        assertEquals(restas[i][j], r);\n    }\n}\n\n",
          "grade": 8,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    },
    {
      "name": "Test2",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\n\nString [] horas = {\n  \"5:3:19\",\"21:05:8\",\"12:57:15\",\"7:20:37\",\"2:26:35\",\"10:22:4\",\"16:21:19\",\"12:6:46\",\n  \"9:7:35\",\"13:38:39\",\"12:22:15\",\"11:30:8\",\"10:23:33\",\"6:44:29\",\"7:59:16\",\n  \"2:53:56\",\"2:31:52\",\"22:33:45\",\"9:43:58\"};\ndouble [][] restas = {\n  {0,\t-57709,\t-28436,\t-8238,\t9404,\t-19125,\t-40680,\t-25407,\t-14656,\t-30920,\t-26336,\t-23209,\t-19214,\t-6070,\t-10557,\t7763,\t9087,\t-63026,\t-16839},\n  {57709,\t0,\t29273,\t49471,\t67113,\t38584,\t17029,\t32302,\t43053,\t26789,\t31373,\t34500,\t38495,\t51639,\t47152,\t65472,\t66796,\t-5317,\t40870},\n  {28436,\t-29273,\t0,\t20198,\t37840,\t9311,\t-12244,\t3029,\t13780,\t-2484,\t2100,\t5227,\t9222,\t22366,\t17879,\t36199,\t37523,\t-34590,\t11597},\n  {8238,\t-49471,\t-20198,\t0,\t17642,\t-10887,\t-32442,\t-17169,\t-6418,\t-22682,\t-18098,\t-14971,\t-10976,\t2168,\t-2319,\t16001,\t17325,\t-54788,\t-8601},\n  {-9404,\t-67113,\t-37840,\t-17642,\t0,\t-28529,\t-50084,\t-34811,\t-24060,\t-40324,\t-35740,\t-32613,\t-28618,\t-15474,\t-19961,\t-1641,\t-317,\t-72430,\t-26243},\n  {19125,\t-38584,\t-9311,\t10887,\t28529,\t0,\t-21555,\t-6282,\t4469,\t-11795,\t-7211,\t-4084,\t-89,\t13055,\t8568,\t26888,\t28212,\t-43901,\t2286},\n  {40680,\t-17029,\t12244,\t32442,\t50084,\t21555,\t0,\t15273,\t26024,\t9760,\t14344,\t17471,\t21466,\t34610,\t30123,\t48443,\t49767,\t-22346,\t23841},\n  {25407,\t-32302,\t-3029,\t17169,\t34811,\t6282,\t-15273,\t0,\t10751,\t-5513,\t-929,\t2198,\t6193,\t19337,\t14850,\t33170,\t34494,\t-37619,\t8568},\n  {14656,\t-43053,\t-13780,\t6418,\t24060,\t-4469,\t-26024,\t-10751,\t0,\t-16264,\t-11680,\t-8553,\t-4558,\t8586,\t4099,\t22419,\t23743,\t-48370,\t-2183},\n  {30920,\t-26789,\t2484,\t22682,\t40324,\t11795,\t-9760,\t5513,\t16264,\t0,\t4584,\t7711,\t11706,\t24850,\t20363,\t38683,\t40007,\t-32106,\t14081},\n  {26336,\t-31373,\t-2100,\t18098,\t35740,\t7211,\t-14344,\t929,\t11680,\t-4584,\t0,\t3127,\t7122,\t20266,\t15779,\t34099,\t35423,\t-36690,\t9497},\n  {23209,\t-34500,\t-5227,\t14971,\t32613,\t4084,\t-17471,\t-2198,\t8553,\t-7711,\t-3127,\t0,\t3995,\t17139,\t12652,\t30972,\t32296,\t-39817,\t6370},\n  {19214,\t-38495,\t-9222,\t10976,\t28618,\t89,\t-21466,\t-6193,\t4558,\t-11706,\t-7122,\t-3995,\t0,\t13144,\t8657,\t26977,\t28301,\t-43812,\t2375},\n  {6070,\t-51639,\t-22366,\t-2168,\t15474,\t-13055,\t-34610,\t-19337,\t-8586,\t-24850,\t-20266,\t-17139,\t-13144,\t0,\t-4487,\t13833,\t15157,\t-56956,\t-10769},\n  {10557,\t-47152,\t-17879,\t2319,\t19961,\t-8568,\t-30123,\t-14850,\t-4099,\t-20363,\t-15779,\t-12652,\t-8657,\t4487,\t0,\t18320,\t19644,\t-52469,\t-6282},\n  {-7763,\t-65472,\t-36199,\t-16001,\t1641,\t-26888,\t-48443,\t-33170,\t-22419,\t-38683,\t-34099,\t-30972,\t-26977,\t-13833,\t-18320,\t0,\t1324,\t-70789,\t-24602},\n  {-9087,\t-66796,\t-37523,\t-17325,\t317,\t-28212,\t-49767,\t-34494,\t-23743,\t-40007,\t-35423,\t-32296,\t-28301,\t-15157,\t-19644,\t-1324,\t0,\t-72113,\t-25926},\n  {63026,\t5317,\t34590,\t54788,\t72430,\t43901,\t22346,\t37619,\t48370,\t32106,\t36690,\t39817,\t43812,\t56956,\t52469,\t70789,\t72113,\t0,\t46187},\n  {16839,\t-40870,\t-11597,\t8601,\t26243,\t-2286,\t-23841,\t-8568,\t2183,\t-14081,\t-9497,\t-6370,\t-2375,\t10769,\t6282,\t24602,\t25926,\t-46187,\t0}\n};\nVehiculo [][] v = new Vehiculo[horas.length][4];\n\nVehiculo [ ] v1 = {new CarroGrande(\"URC789\", \"60458723\", 8, 15, 20),\n  new CarroPequeno(\"URC789\", \"60458723\", 8, 15, 20),\n  new Moto(\"URC789\", \"60458723\", 8, 15, 20),\n  new Bicicleta(\"URC789\", \"60458723\", 8, 15, 20)};\nint [ ] t = {10000, 5000, 2000, 1000};\n\n\npublic Test2(){\n\n}\n\n@Before\npublic void setUp()\n{\n    for(int i=0; i< horas.length;i++){\n        String [] d = horas[i].split(\":\");\n        v[i][0] = new CarroGrande(\"URC789\", \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n        v[i][1] = new CarroPequeno(\"URC789\", \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n        v[i][2] = new Moto(\"URC789\", \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n        v[i][3] = new Bicicleta(\"URC789\", \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n    }\n}\n\n@After\npublic void tearDown(){}\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructor1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nfor(int i=0; i<v1.length; i++){\n    assertEquals(\"URC789\", v1[i].getPlaca());\n    assertEquals(\"60458723\", v1[i].getCedulaPropietario());\n    assertNotNull(v1[i].getHoraIngreso());\n}\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructor2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nfor(int i=0; i<v1.length; i++){\n    assertEquals(t[i], v1[i].getTarifa());\n    assertEquals(0, v1[i].getTiempoServicio(), 0);\n    assertNull(v1[i].getHoraSalida());\n}\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nException e = null;\nfor(int i=0; i<v.length;i++){\n    for(int j = 0; j<v.length;j++){\n        e = null;\n        if(i!=j){\n            String [] d = horas[j].split(\":\");\n            try{\n                v[i][0].registrarSalida(Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n            if(restas[i][j]>0){\n                //assertNotNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(0, v[i][0].getTiempoServicio(), 0);\n            }\n            else{\n                //assertNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(-1*restas[i][j]/60.0/60.0, v[i][0].getTiempoServicio(),0.001);\n                assertEquals(-1*restas[i][j]/60.0/60.0*t[0]*1.19, v[i][0].getValorTotalServicio(),0.001);\n            }\n        }\n    }\n}\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nException e = null;\nfor(int i=0; i<v.length;i++){\n    for(int j = 0; j<v.length;j++){\n        e = null;\n        if(i!=j){\n            String [] d = horas[j].split(\":\");\n            try{\n                v[i][1].registrarSalida(Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n            if(restas[i][j]>0){\n                //assertNotNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(0, v[i][1].getTiempoServicio(), 0);\n            }\n            else{\n                //assertNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(-1*restas[i][j]/60.0/60.0, v[i][1].getTiempoServicio(),0.001);\n                assertEquals(-1*restas[i][j]/60.0/60.0*t[1]*1.19, v[i][1].getValorTotalServicio(),0.001);\n            }\n        }\n    }\n}\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida3",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nException e = null;\nfor(int i=0; i<v.length;i++){\n    for(int j = 0; j<v.length;j++){\n        e = null;\n        if(i!=j){\n            String [] d = horas[j].split(\":\");\n            try{\n                v[i][2].registrarSalida(Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n            if(restas[i][j]>0){\n                //assertNotNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(0, v[i][2].getTiempoServicio(), 0);\n            }\n            else{\n                //assertNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(-1*restas[i][j]/60.0/60.0, v[i][2].getTiempoServicio(),0.001);\n                assertEquals(-1*restas[i][j]/60.0/60.0*t[2]*1.19, v[i][2].getValorTotalServicio(),0.001);\n            }\n        }\n    }\n}\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida4",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nException e = null;\nfor(int i=0; i<v.length;i++){\n    for(int j = 0; j<v.length;j++){\n        e = null;\n        if(i!=j){\n            String [] d = horas[j].split(\":\");\n            try{\n                v[i][3].registrarSalida(Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n            if(restas[i][j]>0){\n                //assertNotNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(0, v[i][3].getTiempoServicio(), 0);\n            }\n            else{\n                //assertNull(\"El metodo debe validar que la fecha de salida sea mayor que la de ingreso y lanzar error\", e);\n                assertEquals(-1*restas[i][j]/60.0/60.0, v[i][3].getTiempoServicio(),0.001);\n                assertEquals(-1*restas[i][j]/60.0/60.0*t[3]*1.19, v[i][3].getValorTotalServicio(),0.001);\n            }\n        }\n    }\n}\n",
          "grade": 2,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    },
    {
      "name": "Test3",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\n\nString [] horas = {\n    \"5:3:19\",\"21:05:8\",\"12:57:15\",\"7:20:37\",\"2:26:35\",\"10:22:4\",\"16:21:19\",\"12:6:46\",\n    \"9:7:35\",\"13:38:39\",\"12:22:15\",\"11:30:8\",\"10:23:33\",\"6:44:29\",\"7:59:16\",\n    \"2:53:56\",\"2:31:52\",\"22:33:45\",\"9:43:58\",\n};\ndouble [][] restas = {\n    {0, -57709, -28436, -8238,  9404,   -19125, -40680, -25407, -14656, -30920, -26336, -23209, -19214, -6070,  -10557, 7763,   9087,   -63026, -16839},\n    {57709, 0,  29273,  49471,  67113,  38584,  17029,  32302,  43053,  26789,  31373,  34500,  38495,  51639,  47152,  65472,  66796,  -5317,  40870},\n    {28436, -29273, 0,  20198,  37840,  9311,   -12244, 3029,   13780,  -2484,  2100,   5227,   9222,   22366,  17879,  36199,  37523,  -34590, 11597},\n    {8238,  -49471, -20198, 0,  17642,  -10887, -32442, -17169, -6418,  -22682, -18098, -14971, -10976, 2168,   -2319,  16001,  17325,  -54788, -8601},\n    {-9404, -67113, -37840, -17642, 0,  -28529, -50084, -34811, -24060, -40324, -35740, -32613, -28618, -15474, -19961, -1641,  -317,   -72430, -26243},\n    {19125, -38584, -9311,  10887,  28529,  0,  -21555, -6282,  4469,   -11795, -7211,  -4084,  -89,    13055,  8568,   26888,  28212,  -43901, 2286},\n    {40680, -17029, 12244,  32442,  50084,  21555,  0,  15273,  26024,  9760,   14344,  17471,  21466,  34610,  30123,  48443,  49767,  -22346, 23841},\n    {25407, -32302, -3029,  17169,  34811,  6282,   -15273, 0,  10751,  -5513,  -929,   2198,   6193,   19337,  14850,  33170,  34494,  -37619, 8568},\n    {14656, -43053, -13780, 6418,   24060,  -4469,  -26024, -10751, 0,  -16264, -11680, -8553,  -4558,  8586,   4099,   22419,  23743,  -48370, -2183},\n    {30920, -26789, 2484,   22682,  40324,  11795,  -9760,  5513,   16264,  0,  4584,   7711,   11706,  24850,  20363,  38683,  40007,  -32106, 14081},\n    {26336, -31373, -2100,  18098,  35740,  7211,   -14344, 929,    11680,  -4584,  0,  3127,   7122,   20266,  15779,  34099,  35423,  -36690, 9497},\n    {23209, -34500, -5227,  14971,  32613,  4084,   -17471, -2198,  8553,   -7711,  -3127,  0,  3995,   17139,  12652,  30972,  32296,  -39817, 6370},\n    {19214, -38495, -9222,  10976,  28618,  89, -21466, -6193,  4558,   -11706, -7122,  -3995,  0,  13144,  8657,   26977,  28301,  -43812, 2375},\n    {6070,  -51639, -22366, -2168,  15474,  -13055, -34610, -19337, -8586,  -24850, -20266, -17139, -13144, 0,  -4487,  13833,  15157,  -56956, -10769},\n    {10557, -47152, -17879, 2319,   19961,  -8568,  -30123, -14850, -4099,  -20363, -15779, -12652, -8657,  4487,   0,  18320,  19644,  -52469, -6282},\n    {-7763, -65472, -36199, -16001, 1641,   -26888, -48443, -33170, -22419, -38683, -34099, -30972, -26977, -13833, -18320, 0,  1324,   -70789, -24602},\n    {-9087, -66796, -37523, -17325, 317,    -28212, -49767, -34494, -23743, -40007, -35423, -32296, -28301, -15157, -19644, -1324,  0,  -72113, -25926},\n    {63026, 5317,   34590,  54788,  72430,  43901,  22346,  37619,  48370,  32106,  36690,  39817,  43812,  56956,  52469,  70789,  72113,  0,  46187},\n    {16839, -40870, -11597, 8601,   26243,  -2286,  -23841, -8568,  2183,   -14081, -9497,  -6370,  -2375,  10769,  6282,   24602,  25926,  -46187, 0}\n};\nVehiculo [][] v = new Vehiculo[horas.length][4];\n\nVehiculo [ ] v1 = {new CarroGrande(\"URC789\", \"60458723\", 8, 15, 20),\n    new CarroPequeno(\"URC789\", \"60458723\", 8, 15, 20),\n    new Moto(\"URC789\", \"60458723\", 8, 15, 20),\n    new Bicicleta(\"URC789\", \"60458723\", 8, 15, 20)};\n\n/**\n* Default constructor for test class ParqueaderoTest\n*/\npublic Test3(){\n{\n    for(int i=0; i< horas.length;i++){\n        String [] d = horas[i].split(\":\");\n        v[i][0] = new CarroGrande(\"URC781\"+i, \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n        v[i][1] = new CarroPequeno(\"URC782\"+i, \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n        v[i][2] = new Moto(\"URC783\"+i, \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n        v[i][3] = new Bicicleta(\"URC784\"+i, \"60458723\", Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));\n    }\n}\n\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructor1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero();\n        assertNotNull(p.getVehiculos());\n        assertEquals(30, p.getVehiculos().length);\n        assertNotNull(p.getHistorialVehiculos());\n        assertEquals(0, p.getHistorialVehiculos().size());\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testConstructor2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint n = (int)(Math.random()*80 + 20);\n        Parqueadero p = new Parqueadero(n);\n        assertNotNull(p.getVehiculos());\n        assertEquals(n, p.getVehiculos().length);\n        assertNotNull(p.getHistorialVehiculos());\n        assertEquals(0, p.getHistorialVehiculos().size());\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testTegistrarIngreso1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        Vehiculo[] ap = p.getVehiculos();\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n\n            for(int j=0; j<(i+1)*4; j++){\n                assertNotNull(ap[j]);\n            }\n\n            for(int j=(i+1)*4; j<ap.length; j++)\n                assertNull(ap[j]);\n        }\n\n        for(int i=0; i<v.length;i++){\n            for(int k =0; k<4; k++){\n                assertEquals(v[i][k], ap[4*i+k]);\n            }\n        }\n\n        ArrayList<Vehiculo> ah = p.getHistorialVehiculos();\n        assertNotNull(ah);\n        assertEquals(0, ah.size());\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testTegistrarIngreso2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        Vehiculo[] ap = p.getVehiculos();\n        Vehiculo[] ap2 = new Vehiculo[v.length*2]; \n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        int m = 0;\n        for(int i=0; i<v.length;i++){\n            for(int k =0; k<4; k++){\n                if((4*i+k + 1)%2==0){\n                    ap2[m++] =ap[4*i+k];\n                    ap[4*i+k]=null;\n                }\n            }\n        }\n\n        Exception e = null;\n        boolean rta = false;\n        m = 0;\n        for(int i=0; i< v.length; i++){\n            for(int k =0; k<4; k++){\n                e = null;\n                rta = false;\n                try{\n                    rta = p.ingresarVehiculo(v[i][k]);\n                }\n                catch(Exception ex){\n                    e = ex;\n                }\n                if((4*i+k + 1)%2!=0){\n                    //assertNotNull(e);\n                    assertEquals(false, rta);\n                }\n                else{\n                    //assertNull(e);\n                    assertEquals(true, rta);\n                }\n            }\n        }\n\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testTegistrarIngreso3",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        Vehiculo[] ap = p.getVehiculos();\n        Vehiculo[] ap2 = new Vehiculo[v.length*2]; \n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        int m = 0;\n        for(int i=0; i<v.length;i++){\n            for(int k =0; k<4; k++){\n                if((4*i+k + 1)%2==0){\n                    ap2[m++] =ap[4*i+k];\n                    ap[4*i+k]=null;\n                }\n            }\n        }\n\n        m = 0;\n        for(int i=0; i< v.length; i++){\n            for(int k =0; k<4; k++){\n                if((4*i+k + 1)%2==0){\n                    p.ingresarVehiculo(v[i][k]);\n                    assertEquals(ap2[m++], ap[4*i+k]);\n                }\n            }\n        }\n\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarIngreso4",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        Vehiculo[] ap = p.getVehiculos();\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        Exception e = null;\n        boolean rta = false;\n        try{\n            rta = p.ingresarVehiculo(v1[0]);\n        }\n        catch(Exception ex){\n            e = ex;\n        }\n        //assertNotNull(e);\n        assertEquals(false,  rta);\n\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testBuscar",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        int posicion = 0;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        for(int i=0; i< v.length; i++){\n            for(int k =0; k<4; k++){\n                posicion = p.buscarVehiculo(v[i][k].getPlaca());\n                assertEquals(4*i+k, posicion);\n            }\n        }\n\n        posicion = p.buscarVehiculo(v1[0].getPlaca());\n        assertEquals(-1, posicion);\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        ArrayList<Vehiculo> ah = p.getHistorialVehiculos();\n        Exception e = null;\n\n        Vehiculo vehiculo = null;\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        int m = 1;\n        for(int i=0; i<v.length;i++){\n            for(int k=0;k<4;k++){\n                e = null;\n                try{\n                    vehiculo = p.retirarVehiculo(v[i][k].getPlaca(), 23,0,0);\n                }\n                catch(Exception ex){\n                    e = ex;\n                }\n                //assertNull(e);\n                assertNotNull(vehiculo);\n                assertEquals(m++, ah.size());\n            }\n        }\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length);\n        Exception e = null;\n        ArrayList<Vehiculo> ah = p.getHistorialVehiculos();\n        Vehiculo vehiculo = null;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][1]);\n        }\n\n        int n = 0;\n        for(int i=0; i<v.length;i++){\n            for(int k=0;k<4;k++){\n                e = null;\n                vehiculo = null;\n                try{\n                    vehiculo = p.retirarVehiculo(v[i][k].getPlaca(), 0,35,45);\n                }\n                catch(Exception ex){\n                    e = ex;\n                }\n                //assertNotNull(e);\n                if(k==1){\n                 assertNotNull(vehiculo);\n                 n++;\n                 assertEquals(n, ah.size());\n                }\n                else\n                 assertNull(vehiculo);\n                \n            }\n        }\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRegistrarSalida3",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length*4);\n        ArrayList<Vehiculo> ah = p.getHistorialVehiculos();\n        Exception e = null;\n        Vehiculo vehiculo = null;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n            p.ingresarVehiculo(v[i][1]);\n            p.ingresarVehiculo(v[i][2]);\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        try{\n            vehiculo = p.retirarVehiculo(v1[0].getPlaca(), 23,0,0);\n        }\n        catch(Exception ex){\n            e = ex;\n        }\n        //assertNotNull(e);\n        assertNull(vehiculo);\n        assertEquals(0, ah.size());\n    ",
          "grade": 3,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testResumen1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length);\n        Exception e = null;\n        Vehiculo vehiculo = null;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][0]);\n        }\n\n        for(int i=0; i<v.length;i++){\n            e = null;\n            try{\n                vehiculo = p.retirarVehiculo(v[i][0].getPlaca(), 23,0,0);\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n        }\n        assertEquals(2397919.44, p.getValorBrutoServicio(1), 0.01);\n    ",
          "grade": 4,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testResumen2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length);\n        Exception e = null;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][1]);\n        }\n\n        for(int i=0; i<v.length;i++){\n            e = null;\n            try{\n                p.retirarVehiculo(v[i][1].getPlaca(), 23,0,0);\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n        }\n        assertEquals(1198959.72, p.getValorBrutoServicio(2), 0.01);\n    ",
          "grade": 4,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testResumen3",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length);\n        Exception e = null;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][2]);\n        }\n\n        for(int i=0; i<v.length;i++){\n            e = null;\n            try{\n                p.retirarVehiculo(v[i][2].getPlaca(), 23,0,0);\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n        }\n        assertEquals(479583.89, p.getValorBrutoServicio(3), 0.01);\n    ",
          "grade": 4,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testResumen4",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nParqueadero p = new Parqueadero(v.length);\n        Exception e = null;\n\n        for(int i=0; i< v.length; i++){\n            p.ingresarVehiculo(v[i][3]);\n        }\n\n        for(int i=0; i<v.length;i++){\n            e = null;\n            try{\n                p.retirarVehiculo(v[i][3].getPlaca(), 23,0,0);\n            }\n            catch(Exception ex){\n                e = ex;\n            }\n        }\n        assertEquals(239791.94, p.getValorBrutoServicio(4), 0.01);\n    ",
          "grade": 4,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    }
  ]
}