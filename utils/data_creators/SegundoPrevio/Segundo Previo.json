{
  "name": "Segundo Previo",
  "description": "Segundo Previo",
  "tests": [
    {
      "name": "TestLaunchMachine",
      "tags": [
        "java",
        "types"
      ],
      "description": "Describe tu test",
      "objective": "Coloca el objetivo de tu test",
      "code": "\n\n\n    Ingrediente [] ingredientes = null; \n\n    Ingrediente [] ingredientes2 = null;     \n\n    int [] precios = {\n            4603,\n            4671,\n            4603,\n            4603,\n            4738,\n            4806,\n            4738,\n            4738,\n            4603,\n            4671,\n            4603,\n            4603,\n            4603,\n            4671,\n            4603,\n            4603,\n            4603,\n            4671,\n            4603,\n            4603,\n            2173,\n            2241,\n            2173,\n            2173,\n            2308,\n            2376,\n            2308,\n            2308,\n            2173,\n            2241,\n            2173,\n            2173,\n            2173,\n            2241,\n            2173,\n            2173,\n            2173,\n            2241,\n            2173,\n            2173,\n            2443,\n            2511,\n            2443,\n            2443,\n            2578,\n            2646,\n            2578,\n            2578,\n            2443,\n            2511,\n            2443,\n            2443,\n            2443,\n            2511,\n            2443,\n            2443,\n            2443,\n            2511,\n            2443,\n            2443,\n            5143,\n            5211,\n            5143,\n            5143,\n            5278,\n            5346,\n            5278,\n            5278,\n            5143,\n            5211,\n            5143,\n            5143,\n            5143,\n            5211,\n            5143,\n            5143,\n            5143,\n            5211,\n            5143,\n            5143,\n            5683,\n            5751,\n            5683,\n            5683,\n            5818,\n            5886,\n            5818,\n            5818,\n            5683,\n            5751,\n            5683,\n            5683,\n            5683,\n            5751,\n            5683,\n            5683,\n            5683,\n            5751,\n            5683,\n            5683,\n            4684,\n            4752,\n            4684,\n            4684,\n            4819,\n            4887,\n            4819,\n            4819,\n            4684,\n            4752,\n            4684,\n            4684,\n            4684,\n            4752,\n            4684,\n            4684,\n            4684,\n            4752,\n            4684,\n            4684,\n            2254,\n            2322,\n            2254,\n            2254,\n            2389,\n            2457,\n            2389,\n            2389,\n            2254,\n            2322,\n            2254,\n            2254,\n            2254,\n            2322,\n            2254,\n            2254,\n            2254,\n            2322,\n            2254,\n            2254,\n            2524,\n            2592,\n            2524,\n            2524,\n            2659,\n            2727,\n            2659,\n            2659,\n            2524,\n            2592,\n            2524,\n            2524,\n            2524,\n            2592,\n            2524,\n            2524,\n            2524,\n            2592,\n            2524,\n            2524,\n            5224,\n            5292,\n            5224,\n            5224,\n            5359,\n            5427,\n            5359,\n            5359,\n            5224,\n            5292,\n            5224,\n            5224,\n            5224,\n            5292,\n            5224,\n            5224,\n            5224,\n            5292,\n            5224,\n            5224,\n            5764,\n            5832,\n            5764,\n            5764,\n            5899,\n            5967,\n            5899,\n            5899,\n            5764,\n            5832,\n            5764,\n            5764,\n            5764,\n            5832,\n            5764,\n            5764,\n            5764,\n            5832,\n            5764,\n            5764,\n            4644,\n            4711,\n            4644,\n            4644,\n            4779,\n            4846,\n            4779,\n            4779,\n            4644,\n            4711,\n            4644,\n            4644,\n            4644,\n            4711,\n            4644,\n            4644,\n            4644,\n            4711,\n            4644,\n            4644,\n            2214,\n            2281,\n            2214,\n            2214,\n            2349,\n            2416,\n            2349,\n            2349,\n            2214,\n            2281,\n            2214,\n            2214,\n            2214,\n            2281,\n            2214,\n            2214,\n            2214,\n            2281,\n            2214,\n            2214,\n            2484,\n            2551,\n            2484,\n            2484,\n            2619,\n            2686,\n            2619,\n            2619,\n            2484,\n            2551,\n            2484,\n            2484,\n            2484,\n            2551,\n            2484,\n            2484,\n            2484,\n            2551,\n            2484,\n            2484,\n            5184,\n            5251,\n            5184,\n            5184,\n            5319,\n            5386,\n            5319,\n            5319,\n            5184,\n            5251,\n            5184,\n            5184,\n            5184,\n            5251,\n            5184,\n            5184,\n            5184,\n            5251,\n            5184,\n            5184,\n            5724,\n            5791,\n            5724,\n            5724,\n            5859,\n            5926,\n            5859,\n            5859,\n            5724,\n            5791,\n            5724,\n            5724,\n            5724,\n            5791,\n            5724,\n            5724,\n            5724,\n            5791,\n            5724,\n            5724,\n            4563,\n            4630,\n            4563,\n            4563,\n            4698,\n            4765,\n            4698,\n            4698,\n            4563,\n            4630,\n            4563,\n            4563,\n            4563,\n            4630,\n            4563,\n            4563,\n            4563,\n            4630,\n            4563,\n            4563,\n            2133,\n            2200,\n            2133,\n            2133,\n            2268,\n            2335,\n            2268,\n            2268,\n            2133,\n            2200,\n            2133,\n            2133,\n            2133,\n            2200,\n            2133,\n            2133,\n            2133,\n            2200,\n            2133,\n            2133,\n            2403,\n            2470,\n            2403,\n            2403,\n            2538,\n            2605,\n            2538,\n            2538,\n            2403,\n            2470,\n            2403,\n            2403,\n            2403,\n            2470,\n            2403,\n            2403,\n            2403,\n            2470,\n            2403,\n            2403,\n            5103,\n            5170,\n            5103,\n            5103,\n            5238,\n            5305,\n            5238,\n            5238,\n            5103,\n            5170,\n            5103,\n            5103,\n            5103,\n            5170,\n            5103,\n            5103,\n            5103,\n            5170,\n            5103,\n            5103,\n            5643,\n            5710,\n            5643,\n            5643,\n            5778,\n            5845,\n            5778,\n            5778,\n            5643,\n            5710,\n            5643,\n            5643,\n            5643,\n            5710,\n            5643,\n            5643,\n            5643,\n            5710,\n            5643,\n            5643,\n            4644,\n            4711,\n            4644,\n            4644,\n            4779,\n            4846,\n            4779,\n            4779,\n            4644,\n            4711,\n            4644,\n            4644,\n            4644,\n            4711,\n            4644,\n            4644,\n            4644,\n            4711,\n            4644,\n            4644,\n            2214,\n            2281,\n            2214,\n            2214,\n            2349,\n            2416,\n            2349,\n            2349,\n            2214,\n            2281,\n            2214,\n            2214,\n            2214,\n            2281,\n            2214,\n            2214,\n            2214,\n            2281,\n            2214,\n            2214,\n            2484,\n            2551,\n            2484,\n            2484,\n            2619,\n            2686,\n            2619,\n            2619,\n            2484,\n            2551,\n            2484,\n            2484,\n            2484,\n            2551,\n            2484,\n            2484,\n            2484,\n            2551,\n            2484,\n            2484,\n            5184,\n            5251,\n            5184,\n            5184,\n            5319,\n            5386,\n            5319,\n            5319,\n            5184,\n            5251,\n            5184,\n            5184,\n            5184,\n            5251,\n            5184,\n            5184,\n            5184,\n            5251,\n            5184,\n            5184,\n            5724,\n            5791,\n            5724,\n            5724,\n            5859,\n            5926,\n            5859,\n            5859,\n            5724,\n            5791,\n            5724,\n            5724,\n            5724,\n            5791,\n            5724,\n            5724,\n            5724,\n            5791,\n            5724,\n            5724\n        };\n    boolean [] puede = {\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            true,\n            true,\n            true,\n            true,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            true,\n            true,\n            true,\n            true,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            true,\n            true,\n            true,\n            true,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            true,\n            true,\n            true,\n            true,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false\n        };\n\npublic TestLaunchMachine(){\n}\n\n@Before\npublic void setUp(){\n    ingredientes = new Ingrediente [] {new Fruta(\"Papaya\",5000,2),\n        new Fruta(\"Mora\",5000,4),new Fruta(\"Lulo\",5000,3),\n        new Fruta(\"Naranja\",5000, 1),new Fruta(\"Banano\",5000,3),\n        new Proteina(\"Carne de Res\",5000,16),new Proteina(\"Cerdo\",5000,7),\n        new Proteina(\"Pollo\",5000,8),new Proteina(\"Bagre\",5000,18),\n        new Proteina(\"Mojarra\",5000,20),new Grano(\"Lenteja\",5000,1),\n        new Grano(\"Garbanzo\",5000,2),new Grano(\"Fijol\",5000,1),\n        new Grano(\"Alverja\",5000,1),new Grano(\"Caraota\",5000,1),\n        new Almidon(\"Papa Negra\",5000,1),new Almidon(\"Papa Amarilla\",5000,2),\n        new Almidon(\"Platano Verde\",5000,1),new Almidon(\"Yuca\",5000,1),\n        new Almidon(\"Apio\",5000,1)};\n}\n\n@After\npublic void tearDown(){}\n\n\n",
      "test_cases": [
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testIngredienteRegistrarVenta1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint a = ((int)(Math.random()*1000))%1000;\nint b =  ((int)(Math.random()*1000))%100;\nFruta fruta1 = new Fruta(\"Mora\", a, 1);\nProteina proteina1 = new Proteina(\"Carne\", a, 1);\nGrano grano1 = new Grano(\"Frijol\", a, 1);\nAlmidon almidon1 = new Almidon(\"Yuca\", a, 1);\n\nfruta1.registrarVenta(b);\nproteina1.registrarVenta(b);\ngrano1.registrarVenta(b);\nalmidon1.registrarVenta(b);\n\nassertEquals(a-b, fruta1.getCantidadDisponible());\nassertEquals(a-b, proteina1.getCantidadDisponible());\nassertEquals(a-b, grano1.getCantidadDisponible());\nassertEquals(a-b, almidon1.getCantidadDisponible());\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testIngredienteRegistrarCompra1",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint a = ((int)(Math.random()*1000))%1000 + 1;\nint b =  ((int)(Math.random()*1000))%100 + 1;\nFruta fruta1 = new Fruta(\"Mora\", a, b);\nProteina proteina1 = new Proteina(\"Carne\", a, b);\nGrano grano1 = new Grano(\"Frijol\", a, b);\nAlmidon almidon1 = new Almidon(\"Yuca\", a, b);\n\nfruta1.registrarCompra(a, b + a/b);\nproteina1.registrarCompra(a, b + a/b);\ngrano1.registrarCompra(a, b + a/b);\nalmidon1.registrarCompra(a, b + a/b);\n\nassertEquals(b + a/b, fruta1.getPrecioCompra());\nassertEquals(b + a/b, proteina1.getPrecioCompra());\nassertEquals(b + a/b, grano1.getPrecioCompra());\nassertEquals(b + a/b, almidon1.getPrecioCompra());\n\nfruta1.registrarCompra(a, b + a/b);\nproteina1.registrarCompra(a, b + a/b);\ngrano1.registrarCompra(a, b + a/b);\nalmidon1.registrarCompra(a, b + a/b);        \n\nassertEquals(b + a/b, fruta1.getPrecioCompra());\nassertEquals(b + a/b, proteina1.getPrecioCompra());\nassertEquals(b + a/b, grano1.getPrecioCompra());\nassertEquals(b + a/b, almidon1.getPrecioCompra());        \n\nfruta1.registrarCompra(a, b - a/b);\nproteina1.registrarCompra(a, b - a/b);\ngrano1.registrarCompra(a, b - a/b);\nalmidon1.registrarCompra(a, b - a/b);\n\nassertEquals(b + a/b, fruta1.getPrecioCompra());\nassertEquals(b + a/b, proteina1.getPrecioCompra());\nassertEquals(b + a/b, grano1.getPrecioCompra());\nassertEquals(b + a/b, almidon1.getPrecioCompra());\n\nassertEquals(4*a, fruta1.getCantidadDisponible());\nassertEquals(4*a, proteina1.getCantidadDisponible());\nassertEquals(4*a, grano1.getCantidadDisponible());\nassertEquals(4*a, almidon1.getCantidadDisponible());        \n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testIngredienteRegistrarVenta2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint b = ((int)(Math.random()*1000))%1000;\nint a = 0;\nIngrediente ingrediente = null;\n\nfor(int i=0; i< ingredientes.length; i++){\n    ingrediente = ingredientes[i];\n    a = ingrediente.getCantidadDisponible();\n    ingrediente.registrarVenta(b);\n    assertEquals(a-b, ingrediente.getCantidadDisponible());\n}\n\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testIngredienteRegistrarCompra2",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nint a = ((int)(Math.random()*1000))%1000 + 1;\nint b =  ((int)(Math.random()*1000))%100 + 1;\nint x = 0, y = 0;\nIngrediente ingrediente = null;\n\nfor(int i=0; i< ingredientes.length; i++){\n    ingrediente = ingredientes[i];\n    x = ingrediente.getPrecioCompra();\n    y = ingrediente.getCantidadDisponible();\n\n    ingrediente.registrarCompra(a, x + a/b);\n    assertEquals(x + a/b, ingrediente.getPrecioCompra());\n\n    ingrediente.registrarCompra(a, x + a/b);\n    assertEquals(x + a/b, ingrediente.getPrecioCompra());\n\n    ingrediente.registrarCompra(a, x - a/b);\n    assertEquals(x + a/b, ingrediente.getPrecioCompra());\n\n    assertEquals(y + 3*a, ingrediente.getCantidadDisponible());                 \n}\n\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testIngredienteEquals",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nFruta fruta1 = new Fruta(\"mora\", 1, 1);\nFruta fruta2 = new Fruta(\"mora\", 1, 1);\nassertEquals(true, fruta1.equals(fruta2));\nProteina proteina1 = new Proteina(\"mora\", 1, 1);\nassertEquals(false, fruta1.equals(proteina1));\nGrano grano1 = new Grano(\"mora\", 1, 1);\nassertEquals(false, fruta1.equals(grano1));\nAlmidon almidon1 = new Almidon(\"mora\", 1, 1);\nassertEquals(false, fruta1.equals(almidon1));\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAlmuerzoConstructor",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nRestaurante r = new Restaurante();\nArrayList <Ingrediente> ing = new ArrayList<Ingrediente>();\nfor(int i=0;i<ingredientes.length;i++) ing.add(ingredientes[i]);\nr.setIngredientes(ing);\nAlmuerzo a = new Almuerzo(r, \"Papaya\", \"Carne de Res\", \"Lenteja\", \"Papa Negra\");\nassertEquals(precios[0], a.getPrecioVenta());\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAlmuerzoPrecioVenta",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nRestaurante r = new Restaurante();\nArrayList <Ingrediente> ing = new ArrayList<Ingrediente>();\nfor(int i=0;i<ingredientes.length;i++) ing.add(ingredientes[i]);\nr.setIngredientes(ing);\n\nAlmuerzo a = null;\nint m = 0;\nfor(int i=0; i<=4; i++){\n    for(int j=5; j<=9; j++){\n        for(int k=10; k<=14; k++){\n            for(int l=15;l<19;l++){\n                a = new Almuerzo(r, ingredientes[i].getNombre(), \n                    ingredientes[j].getNombre(), \n                    ingredientes[k].getNombre(),\n                    ingredientes[l].getNombre());\n                assertEquals(precios[m++], a.getPrecioVenta());\n            }\n        }\n    }\n}\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testAlmuerzoSePuedePrepararYRegistrarVenta",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nRestaurante r = new Restaurante();\nArrayList <Ingrediente> ing = new ArrayList<Ingrediente>();\nfor(int i=0;i<ingredientes.length;i++) ing.add(ingredientes[i]);\nr.setIngredientes(ing);\n\nAlmuerzo a = null;\nint m = 0;\nfor(int i=0; i<=4; i++){\n    for(int j=5; j<=9; j++){\n        for(int k=10; k<=14; k++){\n            for(int l=15;l<19;l++){\n                a = new Almuerzo(r, ingredientes[i].getNombre(), \n                    ingredientes[j].getNombre(), \n                    ingredientes[k].getNombre(),\n                    ingredientes[l].getNombre());\n                assertEquals(puede[m++], a.sePuedePreparar());\n                a.registrarVenta();\n            }\n        }\n    }\n}\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRestauranteGetNombres",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nRestaurante r = new Restaurante();\nString [] s = null;\nArrayList <Ingrediente> ing = new ArrayList<Ingrediente>();\nfor(int i=0;i<ingredientes.length;i++) ing.add(ingredientes[i]);\nr.setIngredientes(ing);\n\ns = r.getNombresFrutas();\nassertNotNull(s);\nfor(int i=0; i<=4; i++){\n  assertEquals(ingredientes[i].getNombre(), s[i]);\n}\ns = null;\n\ns = r.getNombresProteinas();\nassertNotNull(s);        \nfor(int j=5, i=0; j<=9; j++, i++){\n   assertEquals(ingredientes[j].getNombre(), s[i]);\n}\ns = null;\n\ns = r.getNombresGranos();\nassertNotNull(s);        \nfor(int k=10, i=0; k<=14; k++,i++){\n    assertEquals(ingredientes[k].getNombre(), s[i]);            \n}\ns = null;\n\ns = r.getNombresAlmidones();\nassertNotNull(s);                \nfor(int l=15, i=0;l<19;l++, i++){\n    assertEquals(ingredientes[l].getNombre(), s[i]);\n}\ns = null;\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        },
        {
          "topic": [
            {
              "visible": true,
              "_id": "5e24dd6a6170a20029b7397d",
              "owner": "5e24dc466170a20029b73977",
              "name": "t0019",
              "description": "Uso de Arboles",
              "updatedAt": "2020-01-19T22:51:22.403Z",
              "createdAt": "2020-01-19T22:51:22.403Z",
              "cursor": 3,
              "__v": 0,
              "id": "5e24dd6a6170a20029b7397d"
            }
          ],
          "name": "testRestauranteBuscar",
          "objective": "Description not provided",
          "successMessage": "Successfull message not provided",
          "successMessageLink": "Successfull link not provided",
          "failureMessage": "Failure link not provided",
          "failureMessageLink": "Failure link not provided",
          "code": "\nRestaurante r = new Restaurante();\nString [] s = null;\nArrayList <Ingrediente> ing = new ArrayList<Ingrediente>();\nfor(int i=0;i<ingredientes.length;i++) ing.add(ingredientes[i]);\nr.setIngredientes(ing);\n\nIngrediente ingrediente = null;\n\nfor(int i=0; i<=4; i++){\n  ingrediente = r.buscarIngrediente(ingredientes[i].getNombre());\n  assertNotNull(ingrediente);\n}\n\n\nfor(int j=5, i=0; j<=9; j++, i++){\n  ingrediente = r.buscarIngrediente(ingredientes[j].getNombre());\n  assertNotNull(ingrediente);\n}\n\nfor(int k=10, i=0; k<=14; k++,i++){\n  ingrediente = r.buscarIngrediente(ingredientes[k].getNombre());\n  assertNotNull(ingrediente);\n}\n\nfor(int l=15, i=0;l<19;l++, i++){\n  ingrediente = r.buscarIngrediente(ingredientes[l].getNombre());\n  assertNotNull(ingrediente);\n}\n\n",
          "grade": 10,
          "timeout": "Configurator.TIMEOUT_VERY_LONG"
        }
      ]
    }
  ]
}